# -*- coding: utf-8 -*-
# Generated by Django 1.11.3 on 2017-08-26 09:16
from __future__ import unicode_literals

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0008_alter_user_username_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Usuario',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=30, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id_usuario', models.AutoField(db_column='ID_Usuario', primary_key=True, serialize=False)),
                ('photo', models.ImageField(blank=True, null=True, upload_to='profiles')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'Usuario',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Exploracion',
            fields=[
                ('id_exploracion', models.AutoField(db_column='ID_Exploracion', primary_key=True, serialize=False)),
                ('nombre', models.CharField(max_length=150)),
                ('fecha', models.DateTimeField(auto_now_add=True, null=True)),
                ('descripcion', models.CharField(max_length=140, null=True)),
                ('tiempo', models.DecimalField(decimal_places=1, max_digits=3, null=True, validators=[django.core.validators.MaxValueValidator(10)])),
            ],
            options={
                'db_table': 'Exploracion',
            },
        ),
        migrations.CreateModel(
            name='Sensor',
            fields=[
                ('id_sensor', models.AutoField(db_column='ID_Sensor', primary_key=True, serialize=False)),
                ('tipo', models.CharField(max_length=20)),
                ('fecha', models.DateTimeField(auto_now_add=True, null=True)),
                ('enable', models.BooleanField(default=False)),
            ],
            options={
                'db_table': 'Sensor',
            },
        ),
        migrations.CreateModel(
            name='sensorDatoGpio',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data', models.DecimalField(decimal_places=1, max_digits=3, null=True, validators=[django.core.validators.MinValueValidator(-10), django.core.validators.MaxValueValidator(100)])),
                ('fecha', models.DateTimeField(auto_now_add=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='sensorDatoSpi',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data', models.PositiveSmallIntegerField(null=True)),
                ('fecha', models.DateTimeField(auto_now_add=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='sensorDatoUart',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('lat', models.FloatField(default=0, null=True)),
                ('lon', models.FloatField(default=0, null=True)),
                ('fecha', models.DateTimeField(auto_now_add=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Sensores',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(max_length=12, null=True)),
                ('temperatura', models.BooleanField()),
                ('humedad', models.BooleanField()),
                ('gas', models.BooleanField()),
                ('fuego', models.BooleanField()),
                ('luz', models.BooleanField()),
                ('camara', models.BooleanField()),
                ('descripcion', models.CharField(max_length=140, null=True)),
                ('tiempo', models.FloatField(default=0, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='sensorFuego',
            fields=[
                ('sensor_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='raspirover.Sensor')),
                ('fuego', models.ManyToManyField(to='raspirover.sensorDatoSpi')),
            ],
            options={
                'db_table': 'SensorFuego',
            },
            bases=('raspirover.sensor',),
        ),
        migrations.CreateModel(
            name='sensorGas',
            fields=[
                ('sensor_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='raspirover.Sensor')),
                ('gas', models.ManyToManyField(to='raspirover.sensorDatoSpi')),
            ],
            options={
                'db_table': 'SensorGas',
            },
            bases=('raspirover.sensor',),
        ),
        migrations.CreateModel(
            name='sensorGps',
            fields=[
                ('sensor_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='raspirover.Sensor')),
                ('gps', models.ManyToManyField(to='raspirover.sensorDatoUart')),
            ],
            options={
                'db_table': 'SensorGps',
            },
            bases=('raspirover.sensor',),
        ),
        migrations.CreateModel(
            name='sensorHumedad',
            fields=[
                ('sensor_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='raspirover.Sensor')),
                ('humedad', models.ManyToManyField(to='raspirover.sensorDatoGpio')),
            ],
            options={
                'db_table': 'SensorHumedad',
            },
            bases=('raspirover.sensor',),
        ),
        migrations.CreateModel(
            name='sensorLuz',
            fields=[
                ('sensor_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='raspirover.Sensor')),
                ('luz', models.ManyToManyField(to='raspirover.sensorDatoSpi')),
            ],
            options={
                'db_table': 'SensorLuz',
            },
            bases=('raspirover.sensor',),
        ),
        migrations.CreateModel(
            name='sensorTemperatura',
            fields=[
                ('sensor_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='raspirover.Sensor')),
                ('temperatura', models.ManyToManyField(to='raspirover.sensorDatoGpio')),
            ],
            options={
                'db_table': 'SensorTemperatura',
            },
            bases=('raspirover.sensor',),
        ),
        migrations.AddField(
            model_name='exploracion',
            name='sensores',
            field=models.ManyToManyField(to='raspirover.Sensor'),
        ),
        migrations.AddField(
            model_name='exploracion',
            name='usuariofk',
            field=models.ForeignKey(db_column='UsuarioFK', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterUniqueTogether(
            name='exploracion',
            unique_together=set([('usuariofk', 'id_exploracion')]),
        ),
    ]
